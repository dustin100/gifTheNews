{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/NewsList.js","components/Footer.js","components/Pages.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subHeading","SearchBar","handleChange","e","setState","inputValue","target","value","handleSubmit","preventDefault","onSubmittedSearch","state","onSubmit","this","htmlFor","type","placeholder","onChange","Component","NewsList","news","gifs","articleList","map","items","index","newsToUse","key","id","href","url","rel","src","images","original","alt","source","name","description","axios","method","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","proxyHeaders","apiKey","sortBy","pageSize","language","q","page","newsPageNum","xmlToJSON","then","res","data","articles","api_key","limit","offset","gifPageNum","err","console","log","fetchNews","prevProps","prevState","length","renderContent","loadingState","Footer","Pages","disabled","currentPage","onClick","onPrevButtonClick","onNextButtonClick","App","Math","max","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37ca84f6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header className='headerComp'>\n            <h1>{props.title}</h1>\n            <h3>{props.subHeading}</h3>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputValue: \"\"\n        }\n    }\n    handleChange = (e) => {\n        this.setState({\n            inputValue: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.onSubmittedSearch(this.state.inputValue)\n    }\n\n    render() {\n        //{this.props.onSubmittedSearch(this.state.inputValue)} \n        return (\n            <section>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"searching\"></label>\n                    <input type=\"text\" placeholder=\"Search Something\" value={this.state.inputValue} onChange={this.handleChange} />\n                    <button type=\"submit\">Search </button>\n                </form>\n\n            </section>\n        )\n    }\n\n}\n\nexport default SearchBar","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from 'qs';\n\nclass NewsList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnews: [],\n\t\t\tgifs: [],\n\t\t};\n\t}\n\n\trenderContent() {\n\t\tconst articleList = this.state.gifs.map((items, index) => {\n\t\t\tconst newsToUse = this.state.news[index];\n\n\t\t\t\n\n\t\t\treturn (\n\t\t\t\t<div key={items.id} className=\"boxWarpper\">\n\t\t\t\t\t\n\t\t\t\t\t<a href={newsToUse.url} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t<div className=\"mainImage\">\n\t\t\t\t\t\t\t<img src={items.images.original.url} alt={items.title} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<h3 className=\"mainTitle\">{newsToUse.title}</h3>\n\t\t\t\t\t\t<p className=\"articleSource\">\n\t\t\t\t\t\t\tNews Source: <span>{newsToUse.source.name}</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"=desc\"> {newsToUse.description}</p>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\n\t\treturn <div className=\"mainContent\">{articleList}</div>;\n\t}\n\n\tloadingState() {\n\t\treturn (\n\t\t\t<div className=\"loadingContainer\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li></li>\n\t\t\t\t\t<li></li>\n\t\t\t\t\t<li></li>\n\t\t\t\t\t<li></li>\n\t\t\t\t\t<li></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tasync fetchNews() {\n\t\ttry {\n\t\t\t// const newsData = await axios.get('https://newsapi.org/v2/everything', {\n\t\t\t// \tparams: {\n\n\t\t\t// \t\tapiKey: '0cc17ab873b944d08f7a6b7c222b403c',\n\t\t\t// \t\tsortBy: 'relevancy',\n\t\t\t// \t\tpageSize: 18,\n\t\t\t// \t\tlanguage: 'en',\n\t\t\t// \t\tq: this.props.inputValue ? this.props.inputValue : 'breaking news',\n\t\t\t// \t\tpage: this.props.newsPageNum ? this.props.newsPageNum : 1,\n\t\t\t// \t},\n\t\t\t// });\n\n\t\t\t// had to reconfigure code to use a proxy\n\t\t\taxios({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: 'https://proxy.hackeryou.com',\n\t\t\t\tresponseType: 'json',\n\t\t\t\tparamsSerializer: function (params) {\n\t\t\t\t\treturn Qs.stringify(params, { arrayFormat: 'brackets' });\n\t\t\t\t},\n\t\t\t\tparams: {\n\t\t\t\t\treqUrl: 'https://newsapi.org/v2/everything',\n\t\t\t\t\tproxyHeaders: {\n\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n\t\t\t\t\t},\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapiKey: '0cc17ab873b944d08f7a6b7c222b403c',\n\t\t\t\t\t\tsortBy: 'relevancy',\n\t\t\t\t\t\tpageSize: 18,\n\t\t\t\t\t\tlanguage: 'en',\n\t\t\t\t\t\tq: this.props.inputValue ? this.props.inputValue : 'breaking news',\n\t\t\t\t\t\tpage: this.props.newsPageNum ? this.props.newsPageNum : 1,\n\t\t\t\t\t},\n\t\t\t\t\txmlToJSON: false,\n\t\t\t\t},\n\t\t\t}).then((res) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tnews: res.data.articles,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taxios({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: 'https://api.giphy.com/v1/gifs/search',\n\t\t\t\tparams: {\n\t\t\t\t\tapi_key: 'fqGHJALbZ8kmKJ6L76bs9FJmTV6GxJ8t',\n\t\t\t\t\tlimit: 18,\n\t\t\t\t\tq: this.props.inputValue ? this.props.inputValue : 'breaking news',\n\t\t\t\t\toffset: this.props.gifPageNum ? this.props.gifPageNum : 0,\n\t\t\t\t},\n\t\t\t}).then((res) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tgifs: res.data.data,\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.fetchNews();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (\n\t\t\tthis.props.inputValue !== prevProps.inputValue ||\n\t\t\tthis.props.newsPageNum !== prevProps.newsPageNum\n\t\t) {\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnews: [],\n\t\t\t\t\tgifs: [],\n\t\t\t\t},\n\t\t\t\tthis.fetchNews\n\t\t\t);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<section>\n\t\t\t\t{this.state.news.length ? this.renderContent() : this.loadingState()}\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default NewsList;\n","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <footer>\n            <p>Done by Dustin</p>\n            <p>Data Provided by NewsAPI & Giphy</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react'\n\n\nclass Pages extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <div className='pageNav'>\n                <button disabled={this.props.currentPage <= 1} className=\"PrevButton\" onClick={() => {\n                    this.props.onPrevButtonClick()\n                }}>Previous </button>\n\n                <button className=\"nextButton\" onClick={() => {\n                    this.props.onNextButtonClick()\n                }}>Next </button>\n            </div>\n        )\n    }\n\n}\n\nexport default Pages\n","import React, { Component } from 'react'\nimport Header from './components/Header.js'\nimport SearchBar from './components/SearchBar.js'\nimport NewsList from './components/NewsList.js'\nimport Footer from './components/Footer.js'\nimport Pages from './components/Pages.js'\nimport 'normalize.css'\nimport './App.css'\nimport './styles/styles.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputValue: null,\n      newsPageNum: 1,\n      gifPageNum: 0\n\n    }\n  }\n  // used to pass props from SearchBar to NewsList\n  onSubmittedSearch = (inputValue) => {\n    this.setState({\n      inputValue: inputValue,\n      newsPageNum: 1,\n      gifPageNum: 0\n    })\n  }\n  onNextButtonClick = () => {\n    this.setState({\n      newsPageNum: this.state.newsPageNum + 1,\n      gifPageNum: this.state.gifPageNum + 18\n    })\n  }\n  onPrevButtonClick = () => {\n    this.setState({\n      newsPageNum: Math.max(this.state.newsPageNum - 1, 1),\n      gifPageNum: Math.max(this.state.gifPageNum - 18, 0)\n    })\n  }\n\n\n  render() {\n    return (\n      <main>\n        <Header\n          title='Gif The News'\n          subHeading='See The Gifs That Match The News'\n        />\n\n        <SearchBar onSubmittedSearch={this.onSubmittedSearch} />\n\n\n        <NewsList inputValue={this.state.inputValue} newsPageNum={this.state.newsPageNum} gifPageNum={this.state.gifPageNum} />\n\n\n        <Pages onNextButtonClick={this.onNextButtonClick} onPrevButtonClick={this.onPrevButtonClick} currentPage={this.state.newsPageNum} />\n        <Footer />\n\n\n      </main>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}