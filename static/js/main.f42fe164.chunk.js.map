{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/NewsList.js","components/Footer.js","components/Pages.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subHeading","SearchBar","handleChange","e","setState","inputValue","target","value","handleSubmit","preventDefault","onSubmittedSearch","state","onSubmit","this","htmlFor","type","placeholder","onChange","Component","NewsList","news","gifs","articleList","map","items","index","gifToUse","key","id","href","url","rel","src","images","original","alt","source","name","description","axios","get","params","apiKey","sortBy","pageSize","language","q","page","newsPageNum","newsData","api_key","limit","offset","gifPageNum","gifData","data","articles","console","log","fetchNews","prevProps","prevState","length","renderContent","loadingState","Footer","Pages","disabled","currentPage","onClick","onPrevButtonClick","onNextButtonClick","App","Math","max","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f42fe164.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header className='headerComp'>\n            <h1>{props.title}</h1>\n            <h3>{props.subHeading}</h3>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputValue: \"\"\n        }\n    }\n    handleChange = (e) => {\n        this.setState({\n            inputValue: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.onSubmittedSearch(this.state.inputValue)\n    }\n\n    render() {\n        //{this.props.onSubmittedSearch(this.state.inputValue)} \n        return (\n            <section>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"searching\"></label>\n                    <input type=\"text\" placeholder=\"Search Something\" value={this.state.inputValue} onChange={this.handleChange} />\n                    <button type=\"submit\">Search </button>\n                </form>\n\n            </section>\n        )\n    }\n\n}\n\nexport default SearchBar","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass NewsList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            news: [],\n            gifs: []\n\n        }\n    }\n\n\n\n    renderContent() {\n        // const { news, gifs } = this.state; I can use to replace this.state\n        const articleList = this.state.news.map((items, index) => {\n            const gifToUse = this.state.gifs[index];\n\n            return (\n\n\n                <div key={gifToUse.id} className=\"boxWarpper\"> <a href={items.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <div className=\"mainImage\"><img src={gifToUse.images.original.url} alt={gifToUse.title} /> </div>\n\n                    <h3 className=\"mainTitle\">{items.title}</h3>\n                    <p className=\"articleSource\">News Source: <span>{items.source.name}</span></p>\n                    <p className=\"=desc\"> {items.description}</p>\n                </a>\n                </div >\n            )\n\n        })\n\n        return (\n            <div className=\"mainContent\" >\n                {articleList}\n            </div>\n        )\n\n\n\n    }\n\n    loadingState() {\n        return (\n            <div className=\"loadingContainer\">\n                <ul>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                </ul>\n            </div>\n        )\n    }\n\n    async fetchNews() {\n        try {\n            const newsData = await axios.get('https://newsapi.org/v2/everything', {\n                params: {\n                    apiKey: \"0cc17ab873b944d08f7a6b7c222b403c\",\n                    sortBy: 'relevancy',\n                    pageSize: 18,\n                    language: 'en',\n                    q: this.props.inputValue ? this.props.inputValue : 'breaking news',\n                    page: this.props.newsPageNum ? this.props.newsPageNum : 1\n\n                }\n            })\n            const gifData = await axios.get('https://api.giphy.com/v1/gifs/search', {\n                params: {\n                    api_key: 'fqGHJALbZ8kmKJ6L76bs9FJmTV6GxJ8t',\n                    limit: 18,\n                    q: this.props.inputValue ? this.props.inputValue : 'breaking news',\n                    offset: this.props.gifPageNum ? this.props.gifPageNum : 0\n                }\n            })\n\n            this.setState({\n                news: newsData.data.articles,\n                gifs: gifData.data.data,\n\n\n            })\n\n\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    componentDidMount() {\n        this.fetchNews()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.inputValue !== prevProps.inputValue || this.props.newsPageNum !== prevProps.newsPageNum) {\n            this.setState({\n                news: [],\n                gifs: []\n            }, this.fetchNews);\n        }\n    }\n\n    render() {\n        return (\n            <section>\n\n                {this.state.news.length ? this.renderContent() : this.loadingState()}\n            </section>\n        )\n    }\n}\n\nexport default NewsList","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <footer>\n            <p>Done by Dustin</p>\n            <p>Data Provided by NewsAPI & Giphy</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react'\n\n\nclass Pages extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <div className='pageNav'>\n                <button disabled={this.props.currentPage <= 1} className=\"PrevButton\" onClick={() => {\n                    this.props.onPrevButtonClick()\n                }}>Previous </button>\n\n                <button className=\"nextButton\" onClick={() => {\n                    this.props.onNextButtonClick()\n                }}>Next </button>\n            </div>\n        )\n    }\n\n}\n\nexport default Pages\n","import React, { Component } from 'react'\nimport Header from './components/Header.js'\nimport SearchBar from './components/SearchBar.js'\nimport NewsList from './components/NewsList.js'\nimport Footer from './components/Footer.js'\nimport Pages from './components/Pages.js'\nimport 'normalize.css'\nimport './App.css'\nimport './styles/styles.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputValue: null,\n      newsPageNum: 1,\n      gifPageNum: 0\n\n    }\n  }\n  // used to pass props from SearchBar to NewsList\n  onSubmittedSearch = (inputValue) => {\n    this.setState({\n      inputValue: inputValue,\n      newsPageNum: 1,\n      gifPageNum: 0\n    })\n  }\n  onNextButtonClick = () => {\n    this.setState({\n      newsPageNum: this.state.newsPageNum + 1,\n      gifPageNum: this.state.gifPageNum + 18\n    })\n  }\n  onPrevButtonClick = () => {\n    this.setState({\n      newsPageNum: Math.max(this.state.newsPageNum - 1, 1),\n      gifPageNum: Math.max(this.state.gifPageNum - 18, 0)\n    })\n  }\n\n\n  render() {\n    return (\n      <main>\n        <Header\n          title='Gif The News'\n          subHeading='See The Gifs That Match The News'\n        />\n\n        <SearchBar onSubmittedSearch={this.onSubmittedSearch} />\n\n\n        <NewsList inputValue={this.state.inputValue} newsPageNum={this.state.newsPageNum} gifPageNum={this.state.gifPageNum} />\n\n\n        <Pages onNextButtonClick={this.onNextButtonClick} onPrevButtonClick={this.onPrevButtonClick} currentPage={this.state.newsPageNum} />\n        <Footer />\n\n\n      </main>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}